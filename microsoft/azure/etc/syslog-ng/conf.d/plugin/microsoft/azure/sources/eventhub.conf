template t_segway_msg_only {
    template("$MSG");
};
template t_segway_rawmsg_only {
    template("$RAWMSG");
};
template t_segway_microsoft_azure_properties_log {
    template("${.Vendor.properties.log}");
};
filter f_segway_microsoft_azure_properties_log {
    "${.Vendor.properties.log}" ne ""    
};
source s_microsoft_eventhub{
    channel {
        source {
            python(
                class("microsoft_azure_source_eventhub.MicrosoftEventHubSource")
                flags(
                    assume-utf8,
                )
                tags(
                    'transport:eventhub',
                    'structured:true',
                    'format:json',
                    'vendor:msft',
                    'product:azure',
                    'noraw'
                )
            );
        };
        parser {
            json-parser (prefix(".Vendor."));
        };
        rewrite {
            set('', value('HOST'));
            set('', value('FROM_HOST'));
            set('t_segway_rawmsg_only', value('.segway.msgtemplate'));
            set(
                    't_segway_microsoft_azure_properties_log',
                    value('.segway.msgtemplate')
                    condition(filter(f_segway_microsoft_azure_properties_log))
                );
        };
        if ("${.Vendor.time}" ne "") {
            parser {
                #2023-06-27T20:59:05.188066373Z
                date-parser(
                    format(
                        '%FT%T.%f%z',
                        '%FT%T%z'
                    )
                    template("${.Vendor.time}")
                );
            };
            rewrite {
                set-tag("parsedtime");
                set('event', value('.ecs.labels.timesource'));
            };
        } else {
            parser {
                #2023-06-27T20:59:05.188066373Z
                date-parser(
                    format(
                        '%FT%T.%f%z',
                        '%FT%T%z'
                    )
                    template("${.internal.enqueued_time}")
                );
            };
            rewrite {
                set-tag("parsedtime");
                set('enqueue', value('.ecs.labels.timesource'));
            };
        };
        rewrite {
            set('${S_ISODATE}', value('.ecs.@timestamp'));
            set('msft', value('.ecs.labels.vendor'));
            set('azure', value('.ecs.labels.product'));
            set('8.8', value('.ecs.ecs.version'));
        };
    };
};

log {
    
    channel {
        source(s_microsoft_eventhub);
        if (tags("vendor:msft") and tags("product:azure")){
            rewrite {
                set('microsoft-azure', value('.logscale.tags.type'));
                set('${.ecs.labels.vendor}', value('.logscale.tags.vendor'));                
            };            
        };
        destination(d_logscale_ps);
    };
    
};
